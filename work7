\documentclass{article}
\usepackage{listings}
\usepackage{xcolor}

\definecolor{codegreen}{rgb}{0,0.6,0}
\definecolor{codeblue}{rgb}{0,0,0.8}
\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{backcolor}{rgb}{0.95,0.95,0.92}

\lstdefinestyle{mystyle}{
    backgroundcolor=\color{backcolor},   
    commentstyle=\color{codegreen},
    keywordstyle=\color{codeblue},
    numberstyle=\tiny\color{codegray},
    stringstyle=\color{red},
    basicstyle=\ttfamily\footnotesize,
    breakatwhitespace=false,         
    breaklines=true,                 
    captionpos=b,                    
    keepspaces=true,                 
    numbers=left,                    
    numbersep=5pt,                  
    showspaces=false,                
    showstringspaces=false,
    showtabs=false,                  
    tabsize=2
}

\lstset{style=mystyle}

\begin{document}

\section*{Simulación de Algoritmo de Exclusión Mutua en un Sistema Distribuido}

\subsection*{Código Python}
\begin{lstlisting}[language=Python, caption={Algoritmo de exclusión mutua para procesos distribuidos}]
import threading
import time
import random

# Clase para el Proceso
class Proceso:
    def __init__(self, id, num_procesos):
        self.id = id
        self.num_procesos = num_procesos
        self.mensajes_pendientes = []
        self.seccion_critica = False
        self.lock = threading.Lock()

    def solicitar_seccion_critica(self):
        # Solicitud de entrada a la sección crítica
        with self.lock:
            print(f"Proceso {self.id}: Solicitud de entrada a la sección crítica")
            self.mensajes_pendientes.clear()
            for p in range(self.num_procesos):
                if p != self.id:
                    self.mensajes_pendientes.append(p)

            for p in self.mensajes_pendientes:
                print(f"Proceso {self.id}: Enviando mensaje de solicitud a Proceso {p}")
                threading.Thread(target=self.enviar_solicitud, args=(p,)).start()

            # Esperar a recibir respuestas de todos los procesos
            while len(self.mensajes_pendientes) > 0:
                time.sleep(0.1)

            print(f"Proceso {self.id}: Sección crítica concedida")
            self.seccion_critica = True

            # Simulación de la operación crítica
            self.operar_seccion_critica()

    def enviar_solicitud(self, destino):
        # Simulación del envío de mensaje
        print(f"Proceso {self.id}: Mensaje enviado al Proceso {destino}")
        time.sleep(random.uniform(0.1, 0.5))  # Simulación de retraso en el envío

        # Simulación de respuesta del proceso destino
        self.responder_solicitud(destino)

    def responder_solicitud(self, origen):
        # Si no está en sección crítica, responder inmediatamente
        if not self.seccion_critica:
            print(f"Proceso {self.id}: Respondiendo a Proceso {origen}")
            self.mensajes_pendientes.remove(origen)

    def liberar_seccion_critica(self):
        with self.lock:
            print(f"Proceso {self.id}: Liberando la sección crítica")
            self.seccion_critica = False
            for p in range(self.num_procesos):
                if p != self.id:
                    print(f"Proceso {self.id}: Enviando liberación a Proceso {p}")
                    threading.Thread(target=self.enviar_libre, args=(p,)).start()

    def enviar_libre(self, destino):
        # Simulación del envío de mensaje de liberación
        print(f"Proceso {self.id}: Enviando liberación a Proceso {destino}")
        time.sleep(random.uniform(0.1, 0.5))

# Simulación del sistema distribuido con múltiples procesos
def iniciar_proceso(id, num_procesos):
    proceso = Proceso(id, num_procesos)
    proceso.solicitar_seccion_critica()
    time.sleep(random.uniform(1, 2))  # Simulación de tiempo fuera de la sección crítica
    proceso.liberar_seccion_critica()

def main():
    num_procesos = 3
    threads = []

    for i in range(num_procesos):
        t = threading.Thread(target=iniciar_proceso, args=(i, num_procesos))
        threads.append(t)
        t.start()

    for t in threads:
        t.join()

if __name__ == "__main__":
    main()
\end{lstlisting}

\subsection*{Explicación del Código}
\begin{enumerate}
    \item \textbf{Clase Proceso}:
    \begin{itemize}
        \item Cada proceso tiene un ID único y un número total de procesos.
        \item \texttt{mensajes\_pendientes} almacena los procesos a los que se debe enviar la solicitud.
        \item \texttt{solicitar\_seccion\_critica}: Envía solicitudes a otros procesos para entrar a la sección crítica.
        \item \texttt{enviar\_solicitud}: Simula el envío de solicitudes a otros procesos.
        \item \texttt{responder\_solicitud}: Responde a las solicitudes si no está en la sección crítica.
        \item \texttt{liberar\_seccion\_critica}: Envía mensajes para liberar la sección crítica.
    \end{itemize}
    \item \textbf{Función \texttt{iniciar\_proceso}}:
    \begin{itemize}
        \item Simula el comportamiento de un proceso.
        \item Solicita la sección crítica, espera y luego libera el recurso.
    \end{itemize}
    \item \textbf{Función \texttt{main}}:
    \begin{itemize}
        \item Crea múltiples hilos para simular diferentes procesos ejecutándose simultáneamente.
        \item Lanza todos los procesos y espera que terminen.
    \end{itemize}
\end{enumerate}

\end{document}
