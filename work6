\documentclass{article}
\usepackage{listings}
\usepackage{xcolor}

\definecolor{codegreen}{rgb}{0,0.6,0}
\definecolor{codeblue}{rgb}{0,0,0.8}
\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{backcolor}{rgb}{0.95,0.95,0.92}

\lstdefinestyle{mystyle}{
    backgroundcolor=\color{backcolor},   
    commentstyle=\color{codegreen},
    keywordstyle=\color{codeblue},
    numberstyle=\tiny\color{codegray},
    stringstyle=\color{red},
    basicstyle=\ttfamily\footnotesize,
    breakatwhitespace=false,         
    breaklines=true,                 
    captionpos=b,                    
    keepspaces=true,                 
    numbers=left,                    
    numbersep=5pt,                  
    showspaces=false,                
    showstringspaces=false,
    showtabs=false,                  
    tabsize=2
}

\lstset{style=mystyle}

\begin{document}

\section*{Simulación de Acceso Concurrente con un Servidor Centralizado}

\subsection*{Código Python}
\begin{lstlisting}[language=Python, caption={Simulación de acceso concurrente a un recurso}]
import threading
import time
import queue

# Clase para el servidor centralizado
class ServidorCentralizado:
    def __init__(self):
        self.cola_solicitudes = queue.Queue()
        self.recurso_disponible = True

    def solicitar_acceso(self, cliente_id):
        print(f"Cliente {cliente_id} solicita acceso al recurso.")
        self.cola_solicitudes.put(cliente_id)

    def procesar_solicitudes(self):
        while True:
            if not self.cola_solicitudes.empty():
                cliente_id = self.cola_solicitudes.get()
                if self.recurso_disponible:
                    self.recurso_disponible = False
                    print(f"Servidor: otorgando acceso al recurso al Cliente {cliente_id}.")
                    time.sleep(2)  # Simula el tiempo de uso del recurso
                    print(f"Cliente {cliente_id} libera el recurso.")
                    self.recurso_disponible = True
                else:
                    print(f"Servidor: recurso no disponible para el Cliente {cliente_id}, en cola.")

# Clase para el cliente
class Cliente(threading.Thread):
    def __init__(self, cliente_id, servidor):
        super().__init__()
        self.cliente_id = cliente_id
        self.servidor = servidor

    def run(self):
        time.sleep(1)  # Simula el tiempo antes de solicitar el recurso
        self.servidor.solicitar_acceso(self.cliente_id)

# Crear una instancia del servidor
servidor = ServidorCentralizado()

# Crear un hilo para procesar las solicitudes del servidor
hilo_servidor = threading.Thread(target=servidor.procesar_solicitudes, daemon=True)
hilo_servidor.start()

# Crear varios clientes
clientes = [Cliente(cliente_id=i, servidor=servidor) for i in range(5)]

# Iniciar los hilos de los clientes
for cliente in clientes:
    cliente.start()

# Esperar a que todos los clientes terminen
for cliente in clientes:
    cliente.join()

print("Simulación finalizada.")
\end{lstlisting}

\subsection*{Explicación del Código}
\begin{enumerate}
    \item \textbf{ServidorCentralizado}:
    \begin{itemize}
        \item El servidor mantiene una cola (\texttt{cola\_solicitudes}) para gestionar las solicitudes de los clientes.
        \item Procesa las solicitudes en orden, otorgando acceso al recurso si está disponible.
    \end{itemize}
    \item \textbf{Cliente}:
    \begin{itemize}
        \item Cada cliente es un hilo que simula una solicitud al servidor después de un breve retraso.
        \item Solicita acceso al recurso a través del método \texttt{solicitar\_acceso} del servidor.
    \end{itemize}
    \item \textbf{Hilos}:
    \begin{itemize}
        \item Un hilo dedicado ejecuta el método \texttt{procesar\_solicitudes} del servidor para manejar las solicitudes.
        \item Los clientes funcionan como hilos independientes, simulando solicitudes concurrentes.
    \end{itemize}
\end{enumerate}

\end{document}
